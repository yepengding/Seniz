main system TransactionClient() over TXClientVar, TXClientChan {

    init { status: 0, paid: false } -> Channel(c?tx) waiting -> PayGas() pending
    pending [paid=true & consensus = true] -> Proceed() success -> Notify() notified
    pending [beforeCancel] -> Cancel() dropped -> Notify() notified

    notified -> Channel(c?tx) waiting

    waiting = {
        status: 0,
        paid: false,
        consensus: false
    }

    pending = {
        status: 1,
        paid: true
    }

    success = {
        status: 2,
        paid: true,
        consensus: true
    }

    dropped = {
        status: 3,
        paid: true,
        consensus: false
    }

    notified = {
        status: 4
    }

    prop beforeCancel {
        paid = true and consensus = false
    }

    prop paidGas {
        status = 1
    }

    prop notified {
        status = 4
    }

    ltl infinitelyOftenNotified {
        G (paidGas -> F notified)
    }
}

varset TXClientVar {
    status :: int,
    paid :: bool,
    consensus :: bool
}

chanset TXClientChan {
    c :: external
}