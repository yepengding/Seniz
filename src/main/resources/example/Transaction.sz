main system Transaction() over TransactionVar {

    init { status: 0, paid: false } -> Channel() waiting -> PayGas() pending
    pending (paid=true & consensus = true) -> Proceed() success -> Notify() notified
    pending (beforeCancel) -> Cancel() dropped -> Notify() notified

    notified -> Channel() waiting

    waiting = {
        status: 0,
        paid: false
    }

    pending = {
        status: 1,
        paid: true
    }

    success = {
        status: 2,
        paid: true,
        consensus: true
    }

    dropped = {
        status: 3,
        paid: true,
        consensus: false
    }

    notified = {
        status: 4
    }

    prop beforeCancel {
        paid = true & consensus = false
    }

    prop paidGas {
        status = 1
    }

    prop notified {
        status = 4
    }

    ltl infinitelyOftenNotified {
        G (paidGas -> F notified)
    }
}

varset TransactionVar {
    status :: int,
    paid :: bool,
    consensus :: bool
}