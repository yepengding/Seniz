main system Transaction() over TransactionVar {

    init { status: 0, paid: false } -> Channel() waiting -> PayGas() pending -> waiting
    pending (paid=true & consensus = true) -> Proceed() success -> Notify() notified
    pending (beforeCancel) -> Cancel() dropped -> Notify() notified

    notified -> Channel() waiting

    pending = {
        status: 1
    }

    success = {
        status: 2
    }

    dropped = {
        status: 3
    }

    notified = {
        status: 4
    }

    prop beforeCancel {
        paid = true & consensus = false
    }

    prop paidGas {
        status = 1
    }

    prop notified {
        status = 4
    }

    ltl infinitelyOftenNotified {
        G (paidGas -> F notified)
    }
}

varset TransactionVar {
    status :: int,
    paid :: bool
}